generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id            String             @id @default(uuid())
  name          String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  afipCuit      String?
  afipPv        Int?
  afipCondition AFIPCondition?
  afipCertPath  String?
  afipKeyPath   String?
  users         User[]
  contacts      Contact[]
  waIncoming    WhatsAppIncoming[]
  waSessions    WhatsAppSession[]

  @@map("tenants")
}

model User {
  id             String             @id @default(uuid())
  email          String?            @unique
  password       String?
  whatsappNumber String
  role           UserRole           @default(USER)
  tenantId       String
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  tenant         Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  waIncoming     WhatsAppIncoming[]
  waSessions     WhatsAppSession?

  @@unique([whatsappNumber, tenantId, email])
  @@map("users")
}

model WhatsAppSession {
  id        String       @id @default(uuid())
  userId    String       @unique
  tenantId  String
  state     SessionState @default(IDLE)
  batchId   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tenant    Tenant       @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wa_sessions")
}

model WhatsAppIncoming {
  id        String   @id @default(uuid())
  userId    String?
  tenantId  String?
  messageId String   @unique
  processed Boolean  @default(false)
  payload   Json?
  createdAt DateTime @default(now())
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@map("wa_incoming")
}

model Contact {
  id           String          @id @default(uuid())
  tenantId     String
  fullName     String
  docType      DocumentType
  docNumber    String
  email        String?
  whatsapp     String?
  ivaCondition AFIPCondition?
  address      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  tenant       Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, docType, docNumber])
  @@map("contacts")
}

enum DocumentType {
  DNI
  CUIT
  CUIL
}

enum UserRole {
  ADMIN
  USER
}

enum SessionState {
  IDLE
  AWAITING_TENANT_NAME
  AWAITING_AFIP_CUIT
  AWAITING_AFIP_PV
  AWAITING_AFIP_COND
}

enum AFIPCondition {
  MONOTRIBUTO
  RESPONSABLE_INSCRIPTO
  EXENTO
}
