// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

// WhatsApp session states
enum SessionState {
  IDLE
  AWAITING_TENANT_NAME
  AWAITING_AFIP_CUIT
  AWAITING_AFIP_PV
  AWAITING_AFIP_COND
}

// AFIP Tax Condition types
enum AFIPCondition {
  MONOTRIBUTO
  RESPONSABLE_INSCRIPTO
  EXENTO
}

// Tenant represents a "Firma" in the business domain
model Tenant {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // AFIP Configuration
  afipCuit      String?
  afipPv        Int? // Punto de Venta
  afipCondition AFIPCondition?
  afipCertPath  String? // Path to certificate file
  afipKeyPath   String? // Path to private key file

  // Relations
  users       User[]
  waSessions  WhatsAppSession[]
  waIncoming  WhatsAppIncoming[]

  @@map("tenants")
}

// User can belong to multiple tenants, but has one primary tenant
model User {
  id              String   @id @default(uuid())
  email           String?  @unique
  password        String? // Hashed with Argon2
  whatsappNumber  String
  role            UserRole @default(USER)
  tenantId        String // Primary tenant
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant         Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  waSessions     WhatsAppSession[]
  waIncoming     WhatsAppIncoming[]

  // Composite unique constraint: whatsappNumber and email per tenant
  @@unique([whatsappNumber, tenantId, email])
  @@map("users")
}

// WhatsApp Session for managing user conversation state (FSM)
model WhatsAppSession {
  id        String       @id @default(uuid())
  userId    String
  tenantId  String
  state     SessionState @default(IDLE)
  batchId   String? // For grouping related operations
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // One active session per user
  @@unique([userId])
  @@map("wa_sessions")
}

// WhatsApp Incoming messages for idempotency
model WhatsAppIncoming {
  id        String   @id @default(uuid())
  userId    String?
  tenantId  String?
  messageId String   @unique // Meta's message ID for idempotency
  processed Boolean  @default(false)
  payload   Json?    // Store original webhook payload
  createdAt DateTime @default(now())

  // Relations
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  tenant Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull)

  @@map("wa_incoming")
}

// Health check model (keep existing)
model Health {
  id        Int      @id @default(autoincrement())
  status    String   @default("ok")
  message   String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("health")
}
